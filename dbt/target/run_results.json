{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.8", "generated_at": "2025-06-26T16:52:17.406758Z", "invocation_id": "b9e22323-748f-48fc-93b3-0f0dbc6ba501", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-26T16:52:12.609635Z", "completed_at": "2025-06-26T16:52:12.628447Z"}, {"name": "execute", "started_at": "2025-06-26T16:52:12.628777Z", "completed_at": "2025-06-26T16:52:14.175151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5662872791290283, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bd4a94-0000-21f0-001a-350b000197d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.walmart_e2e_project.walmart_date_dim", "compiled": true, "compiled_code": "\n\nWITH distinct_dates AS (\n    SELECT DISTINCT \n      CAST(date AS DATE) AS date_day\n    FROM\n      WALMART_DB.BRONZE.raw_fact\n),\nholiday_flags AS (\n  SELECT\n    CAST(date AS DATE) AS date_day,\n    MAX(IsHoliday) AS IsHoliday  -- Use Min or Max function to remove duplicates; Only works if the data is clean\n  FROM\n    WALMART_DB.BRONZE.raw_fact\n  GROUP BY\n    1 -- the date_day\n)\nSELECT\n  TO_CHAR(d.date_day, 'YYYYMMDD')::INT AS date_id,\n  d.date_day as date,\n  EXTRACT(DAY FROM d.date_day) AS day,\n  EXTRACT(WEEK FROM d.date_day) AS week,\n  EXTRACT(MONTH FROM d.date_day) AS month,\n  CASE EXTRACT(MONTH FROM d.date_day)\n    WHEN 1 THEN 'January'\n    WHEN 2 THEN 'February'\n    WHEN 3 THEN 'March'\n    WHEN 4 THEN 'April'\n    WHEN 5 THEN 'May'\n    WHEN 6 THEN 'June'\n    WHEN 7 THEN 'July'\n    WHEN 8 THEN 'August'\n    WHEN 9 THEN 'September'\n    WHEN 10 THEN 'October'\n    WHEN 11 THEN 'November'\n    WHEN 12 THEN 'December'\n  END AS month_name,\n  EXTRACT(QUARTER FROM d.date_day) AS quarter,\n  EXTRACT(YEAR FROM d.date_day) AS year,\n  EXTRACT(DAYOFWEEK FROM d.date_day) AS dayofweek,\n  CASE EXTRACT(DAYOFWEEK FROM d.date_day)\n    WHEN 1 THEN 'Sunday'\n    WHEN 2 THEN 'Monday'\n    WHEN 3 THEN 'Tuesday'\n    WHEN 4 THEN 'Wednesday'\n    WHEN 5 THEN 'Thursday'\n    WHEN 6 THEN 'Friday'\n    WHEN 7 THEN 'Saturday'\n  END AS day_name,\n  CASE \n    WHEN EXTRACT(DAYOFWEEK FROM d.date_day) IN (1,7) THEN TRUE\n    ELSE FALSE\n  END AS is_weekend,\n  h.IsHoliday,\n  CURRENT_TIMESTAMP() AS Insert_date,\n  CURRENT_TIMESTAMP() AS Update_date\nFROM\n  distinct_dates d\nLEFT JOIN\n  holiday_flags h\nON\n  d.date_day = h.date_day", "relation_name": "WALMART_DB.SILVER.walmart_date_dim", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-26T16:52:12.616649Z", "completed_at": "2025-06-26T16:52:12.621452Z"}, {"name": "execute", "started_at": "2025-06-26T16:52:12.621784Z", "completed_at": "2025-06-26T16:52:14.316583Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7006590366363525, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bd4a94-0000-21f0-001a-350b000197d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.walmart_e2e_project.walmart_store_dim", "compiled": true, "compiled_code": "\n\nWITH raw_stores AS (\n  SELECT \n    store,\n    type,\n    size\n  FROM\n    WALMART_DB.BRONZE.raw_stores\n),\nraw_department AS (\n  SELECT DISTINCT\n    store,\n    dept\n  FROM\n    WALMART_DB.BRONZE.raw_department\n)\nSELECT\n  md5(cast(coalesce(cast(s.store as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(d.dept as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS store_dept_sk,\n  s.store AS Store_id,\n  d.dept AS Dept_id,\n  s.type AS Store_type,\n  s.size AS Store_size,\n  CURRENT_TIMESTAMP() AS Insert_date,\n  CURRENT_TIMESTAMP() AS Update_date\nFROM\n  raw_stores s\nLEFT JOIN\n  raw_department d\nON\n  s.store = d.store", "relation_name": "WALMART_DB.SILVER.walmart_store_dim", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-26T16:52:14.179617Z", "completed_at": "2025-06-26T16:52:14.183227Z"}, {"name": "execute", "started_at": "2025-06-26T16:52:14.183538Z", "completed_at": "2025-06-26T16:52:16.929381Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.7505319118499756, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bd4a94-0000-22ea-001a-350b000311e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.walmart_e2e_project.walmart_fact_table", "compiled": true, "compiled_code": "\n\nWITH weekly_sales AS (\n  SELECT\n    store AS store_id,\n    dept AS dept_id,\n    date,\n    weekly_sales\n  FROM\n    WALMART_DB.BRONZE.raw_department\n),\nfact_data AS (\n  SELECT\n    date,\n    store AS store_id,\n    fuel_price,\n    temperature AS store_temperature,\n    cpi,\n    unemployment,\n    markdown1,\n    markdown2,\n    markdown3,\n    markdown4,\n    markdown5,\n    isholiday\n  FROM\n    WALMART_DB.BRONZE.raw_fact\n),\ndate_lookup AS (\n  SELECT\n    date AS date_day,\n    TO_CHAR(date, 'YYYYMMDD')::INT AS date_id\n  FROM\n    WALMART_DB.SILVER.walmart_date_dim\n)\nSELECT\n  TO_CHAR(w.date, 'YYYYMMDD')::INT AS date_id,\n  w.store_id,\n  w.dept_id,\n  w.weekly_sales AS store_weekly_sales,\n  f.fuel_price,\n  f.store_temperature,\n  f.unemployment,\n  f.markdown1,\n  f.markdown2,\n  f.markdown3,\n  f.markdown4,\n  f.markdown5,\n  f.isholiday as is_holiday,\n  CURRENT_TIMESTAMP() AS Insert_date,\n  CURRENT_TIMESTAMP() AS Update_date,\n  CURRENT_TIMESTAMP() AS vrsn_start_date,\n  NULL AS vrsn_end_date\nFROM\n  weekly_sales w\nLEFT JOIN\n  fact_data f\nON\n  w.store_id = f.store_id\nAND\n  w.date = f.date\nLEFT JOIN\n  date_lookup d\nON\n  w.date = d.date_day", "relation_name": "WALMART_DB.SILVER.walmart_fact_table", "batch_results": null}], "elapsed_time": 6.762799978256226, "args": {"invocation_command": "dbt run --select tag:silver", "source_freshness_run_project_hooks": false, "cache_selected_only": false, "require_resource_names_without_spaces": false, "introspect": true, "project_dir": "/Users/richardkindle/Library/CloudStorage/GoogleDrive-eldnikr@gmail.com/My Drive/DE Academy/DBT/deacademy-dbt", "log_level": "info", "log_format": "default", "use_colors_file": true, "which": "run", "state_modified_compare_more_unrendered_values": false, "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "favor_state": false, "strict_mode": false, "empty": false, "select": ["tag:silver"], "skip_nodes_if_on_run_start_fails": false, "macro_debugging": false, "show_resource_report": false, "profiles_dir": "/Users/richardkindle/.dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "static_parser": true, "log_file_max_bytes": 10485760, "log_format_file": "debug", "log_path": "/Users/richardkindle/Library/CloudStorage/GoogleDrive-eldnikr@gmail.com/My Drive/DE Academy/DBT/deacademy-dbt/logs", "require_batched_execution_for_custom_microbatch_strategy": false, "quiet": false, "vars": {}, "populate_cache": true, "printer_width": 80, "state_modified_compare_vars": false, "require_nested_cumulative_type_params": false, "require_yaml_configuration_for_mf_time_spines": false, "exclude": [], "partial_parse": true, "use_colors": true, "defer": false, "print": true, "log_level_file": "debug", "send_anonymous_usage_stats": true, "indirect_selection": "eager", "partial_parse_file_diff": true}}